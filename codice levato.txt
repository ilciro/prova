		***ControllerAcquista***
public int getIdL(String text) throws SQLException {
		l.setCodIsbn(text);
		return lD.retId(l);
		
		
	}
	
	public String getTipL(String text) throws SQLException
	{
		l.setId(Integer.parseInt(text));
		return lD.retTip(l);
	}
	
	public int getIdG(String text) throws SQLException  {
		g.setTitolo(text);
		return gD.retId( g);
		
		
	}
	
	public String getTipG(String text) throws SQLException 
	{
		g.setTitolo(text);	
		return gD.retTip(g);
	}
	
	public int getIdR(String text) throws SQLException {
		r.setTitolo(text);
		return rD.retId( r);
		
		
	}
	
	public String getTipR(String text) throws SQLException
	{
		r.setTitolo(text);	
		return rD.retTip(r);
	}

			**** test1****
/*
	@Test
	void testGetTipo() {

		int tipo=Integer.parseInt(rBPagamento.getString("tipo"));
		assertEquals(3,tipo);
		
	}

	@Test
	void testGetNumeroCC() {
		assertNotNull(cc2.getNumeroCC());
	}

	@Test
	void testGetLimite() {
		float limite=Integer.parseInt(rBPagamento.getString("limite"));
		assertEquals((float)3000.0 , limite);
	}

	@Test
	void testGetAmmontare() {
		assertNotEquals(0,cc2.getAmmontare());
	}

	@Test
	void testGetScadenza() {


		assertNotNull(rBPagamento.getString("data"));
	}

	@Test
	void testGetNomeUser() {
		assertEquals("pippo",cc2.getNomeUser());
	}

	@Test
	void testGetPrezzoTransazine() {
		float prezzo=Float.parseFloat(rBPagamento.getString("prezzoTransazione"));
		assertNotEquals(0,prezzo);
	}

	@Test
	void testGetCognomeUser() {
		assertNotNull(cc2.getCognomeUser());
	}

	@Test
	void testGetCiv() {
		assertNotNull(cc2.getCiv());
	}
	
	@Test
	void testAnnullaOrdine() throws SQLException {
		assertFalse(cDao.annullaOrdineF(2));
	}
	

	
	@Test
	void testGetNomeById() throws SQLException
	{
		
		vis.setTypeAsBook();
		vis.setId(2);
		assertNotNull(cA.getNomeById());
	}
	@Test
	void testGetNomeByIdG() throws SQLException
	{
		vis.setTypeAsDaily();
		vis.setId(2);
		assertNotNull(cA.getNomeById());
	}
	@Test
	void testGetNomeByIdR() throws SQLException
	{
		vis.setTypeAsMagazine();
		vis.setId(2);
		assertNotNull(cA.getNomeById());
	}
	@Test 
	void testGetDispL() throws SQLException, IdException {
		vis.setTypeAsBook();
		vis.setId(1);
		
		assertNotEquals(0,cA.getDisp(vis.getType()));
	}
	@Test 
	void testGetDispG() throws SQLException, IdException {
		vis.setTypeAsDaily();
		vis.setId(1);
		assertEquals(0,cA.getDisp(vis.getType()));
	}
	@Test 
	void testGetDispR() throws SQLException, IdException {
		vis.setTypeAsMagazine();
		vis.setId(1);
		assertNotEquals(0,cA.getDisp(vis.getType()));
	}
	@Test 
	void testGetCostoL() throws SQLException
	{
		vis.setTypeAsBook();
		l.setId(1);
		assertNotEquals(0,cA.getCosto());
	}
	@Test 
	void testGetCostoG() throws SQLException
	{
		vis.setTypeAsDaily();
		g.setId(1);
		vis.setId(g.getId());
		assertNotEquals(0,cA.getCosto());
	}
	@Test 
	void testGetCostoR() throws SQLException
	{
		vis.setTypeAsMagazine();
		r.setId(1);
		assertNotEquals(0,cA.getCosto());
	}






	@Test
	void testDisponibilitaLibro() throws SQLException, IdException {
		vis.setTypeAsBook();
		assertTrue(cC.disponibilita(vis.getType(), "1"));
	}

	@Test
	void testDisponibilitaGiornale() throws SQLException, IdException {
		vis.setTypeAsDaily();
		assertFalse(cC.disponibilita(vis.getType(),"1"));
	}

	@Test
	void testDisponibilitaRivista() throws SQLException, IdException {
		vis.setTypeAsMagazine();
		assertTrue(cC.disponibilita(vis.getType(),"1"));
	}


	@ParameterizedTest
	@ValueSource(strings= {"ADMIN","EDITORE","SCRITTORE"})
	void testRetTipoUser(String strings) {
		User.getInstance().setIdRuolo(strings);
		assertEquals(strings,User.getInstance().getIdRuolo());
	}
	



	@Test
	void testCancellaL() throws SQLException {
		vis.setId(20);
		vis.setTypeAsBook();
		cGP.cancella(vis.getId());
		assertEquals(20,vis.getId());
		
	}
	@Test
	void testCancellaG() throws SQLException {
		vis.setId(11);
		vis.setTypeAsDaily();
		cGP.cancella(vis.getId());
		assertEquals(11,vis.getId());
		
	}
	@Test
	void testCancellaR() throws SQLException {
		vis.setId(5);
		vis.setTypeAsMagazine();
		cGP.cancella(vis.getId());
		assertEquals(5,vis.getId());
		
	}



	@Test
	void testLogout() throws LogoutException {
		u.setNome("Zerocalcare");
		assertTrue(ControllerHomePageAfterLogin.logout());
		
	}
	
	@Test
	void testLogoutSE() throws LogoutException {
		u.setNome("Bao Publishing");
		assertTrue(ControllerHomePageAfterLoginSE.logout());
		
	}
	@Test
	void testControlla() throws SQLException {
		
		assertTrue(cL.controlla("zerocalcare@gmail.com", "Zerocalcare21"));
	}

	@Test
	void testGetRuoloTempUSer() throws SQLException  {
			assertEquals("W",cL.getRuoloTempUSer("zerocalcare@gmail.com"));
	}
	@Test
	void testPrendi() throws SQLException {
		u.setEmail("giannni@gmail.com");
		assertNotNull(cMU.prendi());
	}

	@Test
	void testAggiorna() throws SQLException
	{
		assertTrue(cMU.aggiorna("g", "c","emailProva@gmail.com","provaPass","descProva",LocalDate.of(1952, 6,6) ,"giannni@gmail.com"));
	}
	

	@Test
	void testAggiornaTot() throws SQLException {
		u.setId(2);
		assertTrue(cMU.aggiornaTot("gianni","morandi" ,"gMorandi@gmail.com","71Giannone" ,"un mito" ,LocalDate.of(1952, 6,7),"A"));
	}
	
	@Test
	void testGetLibriById() throws SQLException {
		assertNotNull(cMP.getLibriById(1));
	}

	@Test
	void testGetGiornaliById() throws SQLException {
		assertNotNull(cMP.getGiornaliById(2));
	}



	@Test
	void testGetRivistaById() throws SQLException {
		assertNotNull(cMP.getRivistaById(5));
	}

	


	
	@Test
	void testControllaL() throws SQLException,  IdException {
		vis.setTypeAsBook();
		vis.setId(1);
		vis.setSpesaT((float)11.25);
		cPC.controlla("pippo","pluto","via paperopoli 12","");
		assertEquals(1,vis.getId());
	}
	@Test
	void testControllaG() throws SQLException,  IdException {
		vis.setTypeAsDaily();
		vis.setId(1);
		vis.setSpesaT((float)5.50);
		cPC.controlla("franco","rossi", "via rossi 8","dopo le 12");
		assertEquals(1,vis.getId());

	}
	@Test
	void testControllaR() throws SQLException,  IdException {
		vis.setId(3);
		vis.setTypeAsMagazine();
		vis.setSpesaT((float)6.25);
		cPC.controlla("franco","rossi", "via rossi 8","dopo le 12");
		assertEquals(3,vis.getId());
		
	}

	*/
